<!DOCTYPE html>
<html lang="en">
  <head>
  	<meta charset="utf-8" />
  	<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />

    <title><%= title %></title>

    <link rel="shortcut icon" href="/images/favicon.ico" />
    <link rel="apple-touch-icon" href="/images/apple-touch-icon.png" />

    <link rel='stylesheet' href='/stylesheets/reset.css' />
    <link rel='stylesheet' href='/stylesheets/main.css' />

    <script src="/javascripts/cookies.js"></script>

    <script>
    
    	function insertAfter( referenceNode, newNode )
		{
    		referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling );
		}
    
    	Array.prototype.remove = function(e) {
  			for (var i = 0; i < this.length; i++) {
    			if (e == this[i]) return this.splice(i, 1);
    		}
		}
		
		Array.prototype.any = function(filter) {
		
			var props = getProperties(filter);
		
			return this.some(function(item, index, array) {
				if(props.every(propertyMatches, { item: item, filter: filter })) {
					return true;
				}
			});
		};
		
		var getProperties = function(filter) {
			var props = [];
			
			for(var prop in filter) {
				if(filter.hasOwnProperty(prop)) {
					props.push(prop.toString());
				}
			}
			
			return props;
		};
		
		var propertyMatches = function(propName, index, array) {
			return this.item[propName] === this.filter[propName];
		};
		
		Array.prototype.first = function(filter) {
			
			var props = getProperties(filter);
		
			for (var i = 0; i < this.length; i++) {
				var item = this[i];
			
				if(props.every(propertyMatches, { item: item, filter: filter })) {
					return item;
				}
			}
			
			return null;
		};

      function showProps(obj, ownPropsOnly) {
        var output = '';

        for(var prop in obj) {
          if(ownPropsOnly && obj.hasOwnProperty(prop)) {
            output += prop.toString() + '\n';
          }
        }

        alert(output);
      }
      
      String.prototype.trimEnd = function(value) {
      	var index = this.lastIndexOf(value);
      	
      	console.log('value is: "' + value + '"');
      	console.log(index);
      	console.log(this.length);
      	
      	if(index !== -1) {
      		return this.substring(0, index);
      	}
      	
      	return this;
      }

      function guidGenerator() {
        var S4 = function() {
          return (((1+Math.random())*0x10000)|0).toString(16).substring(1);
        };

        return (S4()+S4()+"-"+S4()+"-"+S4()+"-"+S4()+"-"+S4()+S4()+S4());
      }

      function ensureUniqueName(newName) {
        var usersList = document.querySelectorAll('#UsersList > ul > li');

        for(var i = 0; i < usersList.length; i++) {

          var listItem = usersList[i];

          var itemId = listItem.id;
          var itemName = listItem.textContent;

          if(newName === itemName && itemId !== clientId) {
            if(newName.match(/.+\_[0-9]+$/)) {
              var underscoreElements = newName.split('_');
              var increment = parseInt(underscoreElements[underscoreElements.length - 1]);

              increment++;

              newName = newName.replace(/(.+)\_([0-9]+)$/, '$1') + ('_' + increment);
            }
            else {
              newName = newName + '_1';
            }
          }
        }

        return newName;
      }
      
      var clients = [];

      function attachChangeNameEvent(currentName, socket) {
        document.querySelector('#UsersList .changeName').addEventListener('click', function(event) {
          var item = this.parentNode;
          item.textContent = '';

          var textbox = document.createElement('input');
          textbox.setAttribute('type', 'text');
          textbox.setAttribute('value', currentName);

          item.appendChild(textbox);

          var button = document.createElement('input');
          button.setAttribute('type', 'button');
          button.setAttribute('value', 'Set');

          item.appendChild(button);

          button.addEventListener('click', function(event) {
            var newName = ensureUniqueName(textbox.value).trim();
            item.innerHTML = newName + ' <span class="changeName">(<span>change</span>)</span>';

            if(currentName !== newName)
            {
              socket.send(JSON.stringify({
                type: 'setName',
                value: newName
              }));

              Cookie.set('clientName', newName);
            }

            attachChangeNameEvent(newName, socket);
          });
        });
      }

      document.addEventListener('DOMContentLoaded', function() {

        'use strict';

        var clientId;

        if(Cookie.has('clientId')) {
          clientId = Cookie.get('clientId');
        }
        else {
          clientId = guidGenerator();
          Cookie.set('clientId', clientId);
        }

        var socket;
        var url = 'ws://' + document.URL.substr(7).split('/')[0];

        if (typeof(MozWebSocket) != 'undefined') {
          socket = new MozWebSocket(url, 'chat');
        }

        if (typeof(WebSocket) != 'undefined') {
          socket = new WebSocket(url, 'chat');
        }

        if (socket) {
          socket.onmessage = function(event) {

            var command = JSON.parse(event.data);

			if(command.type === 'init') {
				clients = command.value;
				
				var usersList = document.querySelector('#UsersList > ul');
				
				clients.forEach(function(client, index, array) {
				
					var userItemHtml = client.name;
					
					// <li class="[current]">John Smith 
					var newListItem = document.createElement('li');
					newListItem.id = 'ID_' + client.id;
					newListItem.appendChild(document.createTextNode(client.name + ' '));
					
					if(client.id === clientId) {
						newListItem.setAttribute('class', 'current');
					
						// <span class="changeName">(<span>change</span>)</span>
						var changeNameNode = document.createElement('span');
						changeNameNode.setAttribute('class', 'changeName');
						changeNameNode.appendChild(document.createTextNode('('));
						var innerSpanNode = document.createElement('span');
						innerSpanNode.textContent = 'change';
						changeNameNode.appendChild(innerSpanNode);
						changeNameNode.appendChild(document.createTextNode(')'));
						
						newListItem.appendChild(changeNameNode);
					}
              		
              		usersList.appendChild(newListItem);
              		
              		if(client.id === clientId) {
              			attachChangeNameEvent(client.name, socket);
              		}
				});
				
				var chatBox = document.getElementById('ChatBox');
            	pollChatBox(chatBox, socket, clientId);
			}
            else if(command.type === 'setName') {
              var usersList = document.querySelectorAll('#UsersList > ul > li');

              for(var i = 0; i < usersList.length; i++) {
                var userItem = usersList[i];

                if(userItem.id === 'ID_' + command.id) {
                  userItem.textContent = command.value;
                }
              }
              
              clients.forEach(function(element, index, array) {
              	if(element.id === command.id) {
              		element.name = command.value;
              	}
              });
            }
            else if(command.type === 'addClient') {
            
            	if(!clients.any({ id: command.id })) {

              		var newListItem = document.createElement('li');
              		newListItem.textContent = command.value
              		newListItem.id = 'ID_' + command.id;
              		document.querySelector('#UsersList > ul').appendChild(newListItem);
              
              		clients.push({ id: command.id, name: command.value });
              
              		//console.log('Client added: ' + command.id + ' (' + command.value + ')');
            	}
            }
            else if(command.type === 'removeClient') {

              var elementToRemove = document.getElementById('ID_' + command.id);
              document.querySelector('#UsersList > ul').removeChild(elementToRemove);
              
              //console.log('Client removed: ' + command.id);
              
              clients.remove(clients.first({ id: command.id }));
            }
            else if (command.type === 'message') {
                        
            	var chatBox = document.querySelector('#ChatWindow > article.ID_' + command.id + ':last-of-type');
            	
            	if(!chatBox) {
            	
            		var client = clients.first({ id: command.id });
            	
            		chatBox = document.createElement('article');
            		chatBox.setAttribute('class', 'ID_' + command.id);
            		
            		var nameElement = document.createElement('h3');
            		nameElement.textContent = 'DUMMY USER: ';
            		chatBox.appendChild(nameElement);
            		
            		var textElement = document.createElement('p');
            		chatBox.appendChild(textElement);
            	
            		var lastConversation = document.querySelector('#ChatWindow > article:last-of-type');
            		
            		if(lastConversation) {
            			insertAfter(lastConversation, chatBox);
            		}
            		else {
            			var chatWindow = document.getElementById('ChatWindow');
            			chatWindow.appendChild(chatBox);
            		}
            	}
            
            	var output = chatBox.querySelector('p');

            	if (command.action === 'add') {
            		output.textContent += command.value;
            		
            		
            		
            	}
            	else if (command.action === 'remove') {
            		output.textContent = output.textContent.trimEnd(command.value);
            	}
            }
          };

          socket.onclose = function() {
            console.log('Socket closed');
          };

          socket.onerror = function(event) {
              alert('socket error'); 
          };

          var name = Cookie.get('clientName') || 'Numpty_1';

          var usersList = document.querySelectorAll('#UsersList > ul > li');
          var existingUserItem;

          for(var i = 0; i < usersList.length; i++) {

            var listItem = usersList[i];

            var itemId = listItem.id;
            if(clientId === itemId) {

              existingUserItem = listItem;
            }
            else {

              var itemName = listItem.textContent;

              if(name === itemName) {
                if(name.match(/.+\_[0-9]+$/)) {
                  var underscoreElements = name.split('_');
                  var increment = parseInt(underscoreElements[underscoreElements.length - 1]);

                  increment++;

                  name = name.replace(/(.+)\_([0-9]+)$/, '$1') + ('_' + increment);
                }
              }
            }
          }

          Cookie.set('clientName', name);

          socket.onopen = function() {

            var command = {
              id: clientId,
              type: 'init',
              value: name
            };

            socket.send(JSON.stringify(command));
          };
        }
        else {
          alert('WebSockets are NOT supported!');
        }
      }, false);
      
      var currentChatBoxText = '';
      
      function pollChatBox(chatBox, socket, clientId) {
      	
      	var text = chatBox.value;
      	
      	if(text !== currentChatBoxText) {
      		
      		if(text.length > currentChatBoxText.length) {
      			var diff = text.replace(currentChatBoxText, '');
      			
      			socket.send(JSON.stringify({ id: clientId, type: 'message', action: 'add', value: diff }));
      		}
      		else if(currentChatBoxText.length > text.length) {
      			var diff = currentChatBoxText.replace(text, '');
      			
      			socket.send(JSON.stringify({ id: clientId, type: 'message', action: 'remove', value: diff }));
      		}
      	}
      	
      	currentChatBoxText = text;
      	
      	setTimeout(function() { pollChatBox(chatBox, socket, clientId); }, 100);
      };
      
    </script>
    
  </head>

  <body>
    <header>
      <hgroup>
        <h1>Nodecamp</h1>
        <h2>WebSocket chatroom written in Node.js</h2>
      </hgroup>
    </header>

    <div id="Middle">
      <h1>Random Chatroom</h1>

      <section id="ChatWindow">
        <h2>Conversion</h2>

        <article class="ID_08cfadce-dee8-2c85-ca06-ac8fed60a844">
          <h3>John:</h3>
          <p>
            Twenty-four hours a day, the latest national and international
            stories as they break.
          </p>
        </article>

        <fieldset>
          <legend>Tim:</legend>

          <label>Message</label>
          <textarea id="ChatBox" cols="30" rows="10"></textarea>
        </fieldset>
      </section>

      <section id="UsersList">
        <h2>Who's Online</h2>

        <ul>

        </ul>

      </section>
    </div>

    <footer>
      <small>
        Fork me on Github at
        <a href="http://github.com/Sironfoot/Nodecamp">http://github.com/Sironfoot/Nodecamp</a>
      </small>
    </footer>

    <%- body %>
  </body>
</html>